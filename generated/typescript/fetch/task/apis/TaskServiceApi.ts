/* tslint:disable */
/* eslint-disable */
/**
 * proto/proto/task/v1/task.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GooglerpcStatus,
    GooglerpcStatusFromJSON,
    GooglerpcStatusToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    V1CreateRequest,
    V1CreateRequestFromJSON,
    V1CreateRequestToJSON,
    V1CreateResponse,
    V1CreateResponseFromJSON,
    V1CreateResponseToJSON,
    V1DeleteResponse,
    V1DeleteResponseFromJSON,
    V1DeleteResponseToJSON,
    V1DoneResponse,
    V1DoneResponseFromJSON,
    V1DoneResponseToJSON,
    V1GetResponse,
    V1GetResponseFromJSON,
    V1GetResponseToJSON,
    V1ListResponse,
    V1ListResponseFromJSON,
    V1ListResponseToJSON,
    V1UndoneResponse,
    V1UndoneResponseFromJSON,
    V1UndoneResponseToJSON,
    V1UpdateResponse,
    V1UpdateResponseFromJSON,
    V1UpdateResponseToJSON,
} from '../models';

export interface TaskServiceCreateRequest {
    body: V1CreateRequest;
}

export interface TaskServiceDeleteRequest {
    id: string;
}

export interface TaskServiceDoneRequest {
    id: string;
}

export interface TaskServiceGetRequest {
    id: string;
}

export interface TaskServiceListRequest {
    userId: string;
}

export interface TaskServiceUndoneRequest {
    id: string;
}

export interface TaskServiceUpdateRequest {
    id: string;
    body: InlineObject;
}

/**
 * 
 */
export class TaskServiceApi extends runtime.BaseAPI {

    /**
     */
    async taskServiceCreateRaw(requestParameters: TaskServiceCreateRequest): Promise<runtime.ApiResponse<V1CreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling taskServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceCreate(requestParameters: TaskServiceCreateRequest): Promise<V1CreateResponse> {
        const response = await this.taskServiceCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taskServiceDeleteRaw(requestParameters: TaskServiceDeleteRequest): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling taskServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceDelete(requestParameters: TaskServiceDeleteRequest): Promise<V1DeleteResponse> {
        const response = await this.taskServiceDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taskServiceDoneRaw(requestParameters: TaskServiceDoneRequest): Promise<runtime.ApiResponse<V1DoneResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling taskServiceDone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{id}/done`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DoneResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceDone(requestParameters: TaskServiceDoneRequest): Promise<V1DoneResponse> {
        const response = await this.taskServiceDoneRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taskServiceGetRaw(requestParameters: TaskServiceGetRequest): Promise<runtime.ApiResponse<V1GetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling taskServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceGet(requestParameters: TaskServiceGetRequest): Promise<V1GetResponse> {
        const response = await this.taskServiceGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taskServiceListRaw(requestParameters: TaskServiceListRequest): Promise<runtime.ApiResponse<V1ListResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling taskServiceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceList(requestParameters: TaskServiceListRequest): Promise<V1ListResponse> {
        const response = await this.taskServiceListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taskServiceUndoneRaw(requestParameters: TaskServiceUndoneRequest): Promise<runtime.ApiResponse<V1UndoneResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling taskServiceUndone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{id}/undone`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UndoneResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceUndone(requestParameters: TaskServiceUndoneRequest): Promise<V1UndoneResponse> {
        const response = await this.taskServiceUndoneRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taskServiceUpdateRaw(requestParameters: TaskServiceUpdateRequest): Promise<runtime.ApiResponse<V1UpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling taskServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling taskServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskServiceUpdate(requestParameters: TaskServiceUpdateRequest): Promise<V1UpdateResponse> {
        const response = await this.taskServiceUpdateRaw(requestParameters);
        return await response.value();
    }

}
