/* tslint:disable */
/* eslint-disable */
/**
 * proto/proto/user/v1/user.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1GetResponse,
    V1GetResponseFromJSON,
    V1GetResponseToJSON,
    V1RegisterRequest,
    V1RegisterRequestFromJSON,
    V1RegisterRequestToJSON,
    V1RegisterResponse,
    V1RegisterResponseFromJSON,
    V1RegisterResponseToJSON,
    V1TerminateResponse,
    V1TerminateResponseFromJSON,
    V1TerminateResponseToJSON,
    V1UpdateResponse,
    V1UpdateResponseFromJSON,
    V1UpdateResponseToJSON,
} from '../models';

export interface UserServiceGetRequest {
    id: string;
}

export interface UserServiceRegisterRequest {
    body: V1RegisterRequest;
}

export interface UserServiceTerminateRequest {
    id: string;
}

export interface UserServiceUpdateRequest {
    id: string;
    body: InlineObject;
}

/**
 * 
 */
export class UserServiceApi extends runtime.BaseAPI {

    /**
     */
    async userServiceGetRaw(requestParameters: UserServiceGetRequest): Promise<runtime.ApiResponse<V1GetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceGet(requestParameters: UserServiceGetRequest): Promise<V1GetResponse> {
        const response = await this.userServiceGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userServiceRegisterRaw(requestParameters: UserServiceRegisterRequest): Promise<runtime.ApiResponse<V1RegisterResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1RegisterRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RegisterResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceRegister(requestParameters: UserServiceRegisterRequest): Promise<V1RegisterResponse> {
        const response = await this.userServiceRegisterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userServiceTerminateRaw(requestParameters: UserServiceTerminateRequest): Promise<runtime.ApiResponse<V1TerminateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceTerminate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TerminateResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceTerminate(requestParameters: UserServiceTerminateRequest): Promise<V1TerminateResponse> {
        const response = await this.userServiceTerminateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userServiceUpdateRaw(requestParameters: UserServiceUpdateRequest): Promise<runtime.ApiResponse<V1UpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async userServiceUpdate(requestParameters: UserServiceUpdateRequest): Promise<V1UpdateResponse> {
        const response = await this.userServiceUpdateRaw(requestParameters);
        return await response.value();
    }

}
